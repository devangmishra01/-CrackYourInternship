1. Find the Duplicate Number
~code~
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0];
        int fast = nums[0];
        do{
            slow = nums[slow];
            fast= nums[nums[fast]];
            
        }   while(slow!=fast);
    
    fast= nums[0];
    while(slow!=fast){
        slow= nums[slow];
        fast=nums[fast];
    }
    return slow;}
};

2.Sort Colors
~code~







3. Remove Duplicate from the sorted array
~code~
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.size()==0){
            return 0;
        }
        int i=0;
        for(int j=1;j<nums.size(); j++){
            if(nums[j]!=nums[i]){
                i++;
                nums[i]=nums[j];
            }
        }
        return i+1;
    }
};

4. Set matrix zeros
~code~
void setZeroes(vector<vector<int>>& m) {
    
        queue<vector<int>> q;
        for(int i=0;i<m.size();i++){
            for(int j=0;j<m[i].size();j++){
                if(m[i][j]==0){
                    q.push({i,j});
                }
            }
        }
        
        while(!q.empty()){
            vector<int> p=q.front();
            for(int i=0;i<m.size();i++){
                m[i][p[1]]=0;
            }
            for(int i=0;i<m[0].size();i++){
                m[p[0]][i]=0;
            }
            q.pop();
        }
    }
    
    5. Move zeros
    ~code~
    class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int n = nums.size();
        if(n==0 || n==1)
            return  ;
        
        int left =0, right=0;
        int temp;
        
        while(right<n){
            if(nums[right]==0)
                right++;
                else{
                    temp = nums[left];
                    nums[left]=nums[right];
                    nums[right]=temp;
                    left++;
                    right++;
                }
        }
    }
};
